// Generated by CoffeeScript 1.6.1

/*
Lopez GarduÃ±o Blanca Azucena
Resendiz Arteaga Juan Alberto
Analisis de Algoritmos
*/


(function() {
  var BLACK, GRAY, Graph, INFINITE, NO_COLOR, NO_PREDECESSOR, Node, WHITE, start;

  INFINITE = -1;

  NO_COLOR = 0;

  WHITE = 1;

  GRAY = 2;

  BLACK = 3;

  NO_PREDECESSOR = null;

  Node = (function() {

    function Node(name) {
      this.nodeName = name;
      this.d = INFINITE;
      this.color = NO_COLOR;
      this.pi = null;
      this.neighbors = {};
      this.f = INFINITE;
    }

    Node.prototype.showInfo = function() {
      return "Name: " + this.nodeName + " >> D: " + this.d + " >> COLOR: " + this.color;
    };

    Node.prototype.getColor = function() {
      if (this.color === WHITE) {
        return "WHITE";
      } else if (this.color === GRAY) {
        return "GRAY";
      } else if (this.color === BLACK) {
        return "NEGRO";
      } else {
        return "NO COLOR";
      }
    };

    Node.prototype.getNeighborsValues = function() {
      return this.neighbors.values();
    };

    Node.prototype.getNeighbors = function() {
      return Object.keys(this.neighbors);
    };

    Node.prototype.addNeighbor = function(neighborName, cost) {
      return this.neighbors[neighborName] = cost;
    };

    return Node;

  })();

  Graph = (function() {

    function Graph(name) {
      this.graphName = name;
      this.numberOfNodes = 0;
      this.nodes = {};
    }

    Graph.prototype.showInfo = function() {
      return "" + this.graphName + " >> " + this.numberOfNodes;
    };

    Graph.prototype.printNodes = function() {
      var node, _i, _len, _ref, _results;
      _ref = this.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        _results.push(console.log(node.showInfo()));
      }
      return _results;
    };

    Graph.prototype.addNode = function(nodeName) {
      var n;
      n = new Node(nodeName);
      this.nodes[nodeName] = n;
      return this.numberOfNodes = this.numberOfNodes + 1;
    };

    Graph.prototype.getKeysOfNodes = function() {
      return Object.keys(this.nodes);
    };

    Graph.prototype.getNode = function(name) {
      return this.nodes[name];
    };

    Graph.prototype.getNodes = function() {
      return this.nodes;
    };

    Graph.prototype.deepFirstSearch = function(nameOriginNode) {
      var n, nn, origin, _i, _len, _ref;
      _ref = this.getKeysOfNodes();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nn = _ref[_i];
        n = this.getNode(nn);
        n.color = WHITE;
        n.pi = null;
      }
      this.time = 0;
      origin = this.getNode(nameOriginNode);
      return this.bp_visit(origin);
    };

    Graph.prototype.bp_visit = function(u) {
      var nv, v, _i, _len, _ref;
      u.color = GRAY;
      this.tiempo += 1;
      u.d = this.tiempo;
      _ref = u.getNeighbors();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nv = _ref[_i];
        v = this.getNode(nv);
        if (v.color === WHITE) {
          v.pi = u.nodeName;
          this.bp_visit(v);
        }
      }
      u.color = BLACK;
      this.tiempo += 1;
      return u.f = this.tiempo;
    };

    Graph.prototype.busquedaAmplitud = function(nameOriginNode) {
      var Q, n, nn, nv, s, v, z, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.getKeysOfNodes();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nn = _ref[_i];
        if (nn !== nameOriginNode) {
          n = this.getNode(nn);
          n.color = WHITE;
          n.d = INFINITE;
          n.pi = null;
        }
      }
      s = this.getNode(nameOriginNode);
      s.color = GRAY;
      s.d = 0;
      s.pi = NO_PREDECESSOR;
      Q = [];
      Q.push(s);
      _results = [];
      while (Q.length !== 0) {
        z = Q.shift();
        _ref1 = z.getNeighbors();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          nv = _ref1[_j];
          v = this.getNode(nv);
          if (v.color === WHITE) {
            v.color = GRAY;
            v.d = z.d + 1;
            v.pi = z.nodeName;
            Q.push(v);
          }
        }
        _results.push(z.color = BLACK);
      }
      return _results;
    };

    Graph.prototype.ruta = function(nameDestinyNode, list) {
      var nd;
      if (list === null) {
        list = [];
      }
      list.push(nameDestinyNode);
      nd = this.getNode(nameDestinyNode);
      if (nd.pi !== null && typeof nd.pi !== "undefined" && ("" + nd.pi).length > 0) {
        return this.ruta(nd.pi, list);
      }
      return list;
    };

    return Graph;

  })();

  /*
  ----------------------------------------
  ----------------------------------------
  ----------------------------------------
  */


  $(document).on("click", "#start", function() {
    return start();
  });

  start = function() {
    var elemento, g, r, ruta, ruta2, s, t, u, v, w, x, y, _i, _len;
    g = new Graph("Mi grafo 1");
    g.addNode("r");
    g.addNode("s");
    g.addNode("t");
    g.addNode("u");
    g.addNode("v");
    g.addNode("w");
    g.addNode("x");
    g.addNode("y");
    console.log("LLAVES");
    console.log(g.getKeysOfNodes());
    r = g.getNode("r");
    r.addNeighbor("s", 1);
    r.addNeighbor("v", 1);
    s = g.getNode("s");
    s.addNeighbor("r", 1);
    s.addNeighbor("w", 1);
    t = g.getNode("t");
    t.addNeighbor("u", 1);
    t.addNeighbor("w", 1);
    t.addNeighbor("x", 1);
    u = g.getNode("u");
    u.addNeighbor("t", 1);
    u.addNeighbor("x", 1);
    u.addNeighbor("y", 1);
    v = g.getNode("v");
    v.addNeighbor("r", 1);
    w = g.getNode("w");
    w.addNeighbor("s", 1);
    w.addNeighbor("t", 1);
    w.addNeighbor("x", 1);
    x = g.getNode("x");
    x.addNeighbor("t", 1);
    x.addNeighbor("u", 1);
    x.addNeighbor("w", 1);
    x.addNeighbor("y", 1);
    y = g.getNode("y");
    y.addNeighbor("u", 1);
    y.addNeighbor("x", 1);
    console.warn("---- VECINOS ----");
    console.log(r.getNeighbors());
    console.log(s.getNeighbors());
    console.log(t.getNeighbors());
    console.log(u.getNeighbors());
    console.log(v.getNeighbors());
    console.log(w.getNeighbors());
    console.log(x.getNeighbors());
    console.log(y.getNeighbors());
    console.warn("----printNodes----");
    g.printNodes();
    console.warn("-----BUSQUEDA AMPLITUD---");
    g.busquedaAmplitud("s");
    console.warn("----printNodes----");
    g.printNodes();
    console.warn("----RUTA ----");
    ruta = g.ruta("y", null);
    for (_i = 0, _len = ruta.length; _i < _len; _i++) {
      elemento = ruta[_i];
      console.log("RUTA : Y  > " + elemento);
    }
    console.warn("--------");
    ruta2 = g.ruta("v", null);
    return console.log("RUTA : V  > " + ruta2);
  };

}).call(this);
